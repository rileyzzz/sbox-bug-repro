//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "bug";

	DevShader = true;
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
FEATURES
{
    #include "common/features.hlsl"
}

MODES
{
    VrForward();													// Indicates this shader will be used for main rendering
    Depth( "vr_depth_only.vfx" ); 									// Shader that will be used for shadowing and depth prepass
    ToolsVis( S_MODE_TOOLS_VIS ); 									// Ability to see in the editor
    ToolsWireframe( "vr_tools_wireframe.vfx" ); 					// Allows for mat_wireframe to work
	ToolsShadingComplexity( "vr_tools_shading_complexity.vfx" ); 	// Shows how expensive drawing is in debug view
}

//=========================================================================================================================
COMMON
{
	#include "common/shared.hlsl"
}

//=========================================================================================================================

struct VertexInput
{
	#include "common/vertexinput.hlsl"
};

//=========================================================================================================================

struct PixelInput
{
	#include "common/pixelinput.hlsl"
};

//=========================================================================================================================

VS
{
	#include "common/vertex.hlsl"
	//
	// Main
	//
	PixelInput MainVs( INSTANCED_SHADER_PARAMS( VS_INPUT i ) )
	{
		PixelInput o = ProcessVertex( i );
		// Add your vertex manipulation functions here

		return FinalizeVertex( o );
	}
}

//=========================================================================================================================

PS
{
    #include "common/pixel.hlsl"

	//float3 g_vBrokenAttribute < UiGroup("Material,10/11"); Default3( 1.0, 1.0, 1.0 ); >;
    //CreateTextureCube( g_tEnvTexture ) < Attribute("EnvTexture"); Channel( RGBA, Box( EnvTexture ), Srgb ); OutputFormat( RGBA8888 ); SrgbRead( true ); >;
    CreateInputTextureCube( EnvTexture, Linear, 8, "", "", "Material,10/11", Default3( 1.0, 1.0, 1.0 ) );
    CreateTextureCube( g_tEnvTexture ) < Channel( RGBA, Box( EnvTexture ), Srgb ); OutputFormat( RGBA8888 ); SrgbRead( true ); >;


	PS_OUTPUT MainPs( PixelInput i )
	{
		PS_OUTPUT o;

		//o.vColor = float4(g_vBrokenAttribute, 1.0);
        float3 fragPos = i.vPositionWithOffsetWs - g_vWorldToCameraOffset.xyz;
        float3 fragDir = normalize(fragPos - g_vCameraPositionWs);
        float3 reflDir = reflect(fragDir, i.vNormalWs);

        o.vColor = TexCube( g_tEnvTexture, reflDir ).rgba;
		return o;
	}
}